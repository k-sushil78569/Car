#define CUSTOM_SETTINGS
#define INCLUDE_GAMEPAD_MODULE
#include <DabbleESP32.h>
#include <Arduino.h>

//Right motor
int enableRightMotor=32; 
int rightMotorPin1=19;
int rightMotorPin2=18;
//Left motor
int enableLeftMotor=33;
int leftMotorPin1=22;
int leftMotorPin2=23;

#define MAX_MOTOR_SPEED 255
#define step_speed 36

const int PWMFreq = 1000; /* 1 KHz */
const int PWMResolution = 8;
const int rightMotorPWMSpeedChannel = 4;
const int leftMotorPWMSpeedChannel = 5;

void rotateMotor(int rightMotorSpeed, int leftMotorSpeed)
{
  if (rightMotorSpeed < 0)
  {
    digitalWrite(rightMotorPin1,LOW);
    digitalWrite(rightMotorPin2,HIGH);    
  }
  else if (rightMotorSpeed > 0)
  {
    digitalWrite(rightMotorPin1,HIGH);
    digitalWrite(rightMotorPin2,LOW);      
  }
  else
  {
    digitalWrite(rightMotorPin1,LOW);
    digitalWrite(rightMotorPin2,LOW);      
  }
  
  if (leftMotorSpeed < 0)
  {
    digitalWrite(leftMotorPin1,LOW);
    digitalWrite(leftMotorPin2,HIGH);    
  }
  else if (leftMotorSpeed > 0)
  {
    digitalWrite(leftMotorPin1,HIGH);
    digitalWrite(leftMotorPin2,LOW);      
  }
  else
  {
    digitalWrite(leftMotorPin1,LOW);
    digitalWrite(leftMotorPin2,LOW);      
  }
  
  ledcWrite(rightMotorPWMSpeedChannel, abs(rightMotorSpeed));
  ledcWrite(leftMotorPWMSpeedChannel, abs(leftMotorSpeed));  
}

void setUpPinModes()
{
  pinMode(enableRightMotor,OUTPUT);
  pinMode(rightMotorPin1,OUTPUT);
  pinMode(rightMotorPin2,OUTPUT);
  
  pinMode(enableLeftMotor,OUTPUT);
  pinMode(leftMotorPin1,OUTPUT);
  pinMode(leftMotorPin2,OUTPUT);

  //Set up PWM for speed
  ledcSetup(rightMotorPWMSpeedChannel, PWMFreq, PWMResolution);
  ledcSetup(leftMotorPWMSpeedChannel, PWMFreq, PWMResolution);  
  ledcAttachPin(enableRightMotor, rightMotorPWMSpeedChannel);
  ledcAttachPin(enableLeftMotor, leftMotorPWMSpeedChannel); 


  rotateMotor(0,0); 
}

void setup()
{
  setUpPinModes();
  Dabble.begin("MyBluetoothCar"); 
  pinMode(LED_BUILTIN, OUTPUT);
}

void loop()
{
  int rightMotorSpeed=0;
  int leftMotorSpeed=0;
  Dabble.processInput();
  rightMotorSpeed=leftMotorSpeed=GamePad.getRadius()*step_speed;
  if(GamePad.getAngle()>180 && GamePad.getAngle()<360){
    rightMotorSpeed*=(-1);
    leftMotorSpeed*=(-1);
  }
  if(GamePad.getAngle()>=0 && GamePad.getAngle()<30)rightMotorSpeed*=(-1);
  else if(GamePad.getAngle()>=30 && GamePad.getAngle()<=60)rightMotorSpeed=-(rightMotorSpeed/2);
  else if(GamePad.getAngle()>=120 && GamePad.getAngle()<=150)leftMotorSpeed=-(leftMotorSpeed/2);
  else if(GamePad.getAngle()>150 && GamePad.getAngle()<=180)leftMotorSpeed*=(-1);
  else if(GamePad.getAngle()>=180 && GamePad.getAngle()<210)rightMotorSpeed*=(-1);
  else if(GamePad.getAngle()>=210 && GamePad.getAngle()<=240)rightMotorSpeed=-(rightMotorSpeed/2);
  else if(GamePad.getAngle()>=300 && GamePad.getAngle()<=330)leftMotorSpeed=-(leftMotorSpeed/2);
  else if(GamePad.getAngle()>330 && GamePad.getAngle()<=360)leftMotorSpeed*=(-1);


  rotateMotor(rightMotorSpeed, leftMotorSpeed);
}
